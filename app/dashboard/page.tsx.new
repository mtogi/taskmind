"use client"

import { useState, useEffect } from "react"
import Link from "next/link"
import { 
  Calendar, 
  CheckCircle2, 
  Clock, 
  Plus, 
  Star, 
  Trash2, 
  TrendingUp,
  BarChart3,
  Loader2
} from "lucide-react"

import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Progress } from "@/components/ui/progress"
import DashboardLayout from "@/components/layout/DashboardLayout"
import { taskApi } from "@/lib/api"
import { mockGetAllTasks } from "@/lib/mock-api"
import { useError } from "@/hooks/use-error"
import { useToast } from "@/hooks/use-toast"

interface Task {
  id: string;
  title: string;
  dueDate?: Date | null;
  priority: string;
  status: string;
  description?: string | null;
}

export default function DashboardPage() {
  const { captureError } = useError();
  const { toast } = useToast();
  const [isLoading, setIsLoading] = useState(true);
  const [recentTasks, setRecentTasks] = useState<Task[]>([]);
  const [stats, setStats] = useState({
    completed: 0,
    pending: 0,
    total: 0,
    completionRate: 0,
    upcomingDeadlines: 0
  });

  useEffect(() => {
    const loadTasks = async () => {
      try {
        setIsLoading(true);
        
        // Try using the mock API first since we know the backend is having issues
        const response = await mockGetAllTasks();
        
        // Sort tasks by dueDate (if available)
        const tasks = response.tasks.sort((a: Task, b: Task) => {
          if (!a.dueDate) return 1;
          if (!b.dueDate) return -1;
          return new Date(a.dueDate).getTime() - new Date(b.dueDate).getTime();
        });
        
        // Take only the 5 most recent tasks
        setRecentTasks(tasks.slice(0, 5));
        
        // Calculate stats
        const completedTasks = tasks.filter((task: Task) => task.status === 'DONE').length;
        const pendingTasks = tasks.length - completedTasks;
        const completionRate = tasks.length > 0 ? Math.round((completedTasks / tasks.length) * 100) : 0;
        
        // Calculate upcoming deadlines (tasks due in the next 7 days)
        const now = new Date();
        const sevenDaysFromNow = new Date();
        sevenDaysFromNow.setDate(now.getDate() + 7);
        
        const upcomingDeadlines = tasks.filter((task: Task) => {
          if (!task.dueDate || task.status === 'DONE') return false;
          const dueDate = new Date(task.dueDate);
          return dueDate >= now && dueDate <= sevenDaysFromNow;
        }).length;
        
        setStats({
          completed: completedTasks,
          pending: pendingTasks,
          total: tasks.length,
          completionRate,
          upcomingDeadlines
        });
      } catch (error) {
        captureError(error, "Failed to load tasks");
        
        // For demo purposes, set some mock data
        setRecentTasks([
          {
            id: "1",
            title: "Finalize project proposal",
            dueDate: new Date("2023-09-15"),
            priority: "high",
            status: "TODO",
            description: "Complete the final draft of the project proposal",
          },
          {
            id: "2",
            title: "Schedule team meeting",
            dueDate: new Date("2023-09-12"),
            priority: "medium",
            status: "DONE",
            description: "Set up weekly sync meeting with the development team",
          },
          {
            id: "3",
            title: "Research new tools",
            dueDate: new Date("2023-09-18"),
            priority: "low",
            status: "TODO",
            description: "Investigate new project management tools for the team",
          },
          {
            id: "4",
            title: "Update documentation",
            dueDate: new Date("2023-09-14"),
            priority: "medium",
            status: "TODO",
            description: "Update the API documentation with recent changes",
          },
        ]);
        
        // Set mock stats
        setStats({
          completed: 1,
          pending: 3,
          total: 4,
          completionRate: 25,
          upcomingDeadlines: 3
        });
      } finally {
        setIsLoading(false);
      }
    };

    loadTasks();
  }, [captureError]);

  const handleToggleTaskStatus = async (taskId: string, currentStatus: string) => {
    try {
      const newStatus = currentStatus === 'DONE' ? 'TODO' : 'DONE';
      
      // Update the task in the local state
      setRecentTasks(prev => 
        prev.map(task => 
          task.id === taskId ? { ...task, status: newStatus } : task
        )
      );
      
      // Update stats
      if (newStatus === 'DONE') {
        setStats(prev => ({
          ...prev,
          completed: prev.completed + 1,
          pending: prev.pending - 1,
          completionRate: Math.round(((prev.completed + 1) / prev.total) * 100)
        }));
      } else {
        setStats(prev => ({
          ...prev,
          completed: prev.completed - 1,
          pending: prev.pending + 1,
          completionRate: Math.round(((prev.completed - 1) / prev.total) * 100)
        }));
      }
      
      toast({
        title: newStatus === 'DONE' ? "Task completed" : "Task reopened",
        description: "Task status updated successfully",
      });
    } catch (error) {
      captureError(error, "Failed to update task status");
      
      // Revert the optimistic update
      toast({
        title: "Error updating task",
        description: "There was a problem updating the task status",
        variant: "destructive",
      });
    }
  };

  const handleDeleteTask = async (taskId: string) => {
    try {
      // Remove the task from the local state
      setRecentTasks(prev => prev.filter(task => task.id !== taskId));
      
      // Update stats
      const task = recentTasks.find(t => t.id === taskId);
      if (task) {
        if (task.status === 'DONE') {
          setStats(prev => {
            const newCompleted = prev.completed - 1;
            const newTotal = prev.total - 1;
            return {
              ...prev,
              completed: newCompleted,
              total: newTotal,
              completionRate: newTotal > 0 ? Math.round((newCompleted / newTotal) * 100) : 0
            };
          });
        } else {
          setStats(prev => {
            const newPending = prev.pending - 1;
            const newTotal = prev.total - 1;
            return {
              ...prev,
              pending: newPending,
              total: newTotal,
              completionRate: newTotal > 0 ? Math.round((prev.completed / newTotal) * 100) : 0
            };
          });
        }
      }
      
      toast({
        title: "Task deleted",
        description: "Task was deleted successfully",
      });
    } catch (error) {
      captureError(error, "Failed to delete task");
      toast({
        title: "Error deleting task",
        description: "There was a problem deleting the task",
        variant: "destructive",
      });
    }
  };

  const formatDate = (date: Date | string | undefined | null) => {
    if (!date) return "No due date";
    const options: Intl.DateTimeFormatOptions = { month: 'short', day: 'numeric' }
    return new Date(date).toLocaleDateString('en-US', options)
  }

  const getPriorityColor = (priority: string) => {
    switch (priority.toLowerCase()) {
      case "high":
        return "text-red-500 bg-red-50 dark:bg-red-950/50"
      case "medium":
        return "text-yellow-500 bg-yellow-50 dark:bg-yellow-950/50"
      case "low":
        return "text-green-500 bg-green-50 dark:bg-green-950/50"
      default:
        return "text-blue-500 bg-blue-50 dark:bg-blue-950/50"
    }
  }

  return (
    <DashboardLayout>
      <div className="flex items-center justify-between space-y-2">
        <h2 className="text-3xl font-bold tracking-tight">Dashboard</h2>
        <div className="flex items-center space-x-2">
          <Link href="/tasks/new">
            <Button>
              <Plus className="mr-2 h-4 w-4" /> New Task
            </Button>
          </Link>
        </div>
      </div>
      
      {/* Stats section */}
      <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-4">
        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">
              Total Tasks
            </CardTitle>
            <TrendingUp className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{stats.total}</div>
            <p className="text-xs text-muted-foreground">
              Tasks managed in your account
            </p>
          </CardContent>
        </Card>
        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">
              Completed Tasks
            </CardTitle>
            <CheckCircle2 className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{stats.completed}</div>
            <p className="text-xs text-muted-foreground">
              {stats.total > 0 ? `${stats.completionRate}% completion rate` : 'No tasks yet'}
            </p>
          </CardContent>
        </Card>
        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Pending Tasks</CardTitle>
            <Clock className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{stats.pending}</div>
            <p className="text-xs text-muted-foreground">
              Tasks still in progress or to do
            </p>
          </CardContent>
        </Card>
        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">
              Upcoming Deadlines
            </CardTitle>
            <Calendar className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{stats.upcomingDeadlines}</div>
            <p className="text-xs text-muted-foreground">
              Tasks due in the next 7 days
            </p>
          </CardContent>
        </Card>
      </div>
      
      {/* Progress section */}
      <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-2">
        <Card className="col-span-1">
          <CardHeader>
            <CardTitle>Task Completion</CardTitle>
            <CardDescription>
              Your progress on completing tasks
            </CardDescription>
          </CardHeader>
          <CardContent>
            <div className="flex items-center justify-between">
              <div className="flex items-center">
                <BarChart3 className="mr-2 h-4 w-4 text-muted-foreground" />
                <span className="text-sm font-medium">Progress</span>
              </div>
              <span className="text-sm font-medium">{stats.completionRate}%</span>
            </div>
            <Progress value={stats.completionRate} className="mt-2" />
          </CardContent>
        </Card>
      </div>
      
      {/* Recent tasks section */}
      <div className="grid gap-4 md:grid-cols-1">
        <Card className="col-span-1">
          <CardHeader>
            <CardTitle>Recent Tasks</CardTitle>
            <CardDescription>
              Your most recent tasks and their status
            </CardDescription>
          </CardHeader>
          <CardContent>
            {isLoading ? (
              <div className="flex justify-center py-8">
                <Loader2 className="h-8 w-8 animate-spin text-muted-foreground" />
              </div>
            ) : recentTasks.length === 0 ? (
              <div className="flex flex-col items-center justify-center py-8 text-center">
                <div className="mb-2 rounded-full bg-muted p-3">
                  <Star className="h-6 w-6 text-muted-foreground" />
                </div>
                <h3 className="mb-1 text-lg font-semibold">No tasks yet</h3>
                <p className="mb-4 text-sm text-muted-foreground max-w-md">
                  You haven't created any tasks yet. Get started by creating your first task.
                </p>
                <Link href="/tasks/new">
                  <Button size="sm">
                    <Plus className="mr-2 h-4 w-4" /> New Task
                  </Button>
                </Link>
              </div>
            ) : (
              <div className="space-y-2">
                {recentTasks.map((task) => (
                  <div
                    key={task.id}
                    className="flex items-center justify-between space-x-2 rounded-lg border p-3"
                  >
                    <div className="flex flex-1 items-start space-x-3">
                      <button
                        onClick={() => handleToggleTaskStatus(task.id, task.status)}
                        className={`flex h-6 w-6 shrink-0 items-center justify-center rounded-full border ${
                          task.status === 'DONE'
                            ? 'bg-primary border-primary'
                            : 'border-muted-foreground'
                        }`}
                      >
                        {task.status === 'DONE' && (
                          <CheckCircle2 className="h-3 w-3 text-primary-foreground" />
                        )}
                      </button>
                      <div className="space-y-1">
                        <p className={`text-sm font-medium leading-none ${
                          task.status === 'DONE' ? 'line-through text-muted-foreground' : ''
                        }`}>
                          {task.title}
                        </p>
                        <div className="flex items-center space-x-2 text-xs">
                          <span className={`px-1.5 py-0.5 rounded ${getPriorityColor(task.priority)}`}>
                            {task.priority}
                          </span>
                          <span className="text-muted-foreground">
                            {formatDate(task.dueDate)}
                          </span>
                        </div>
                      </div>
                    </div>
                    <button
                      onClick={() => handleDeleteTask(task.id)}
                      className="h-7 w-7 rounded-full hover:bg-muted flex items-center justify-center"
                    >
                      <Trash2 className="h-4 w-4 text-muted-foreground" />
                    </button>
                  </div>
                ))}
                <div className="mt-4 text-center">
                  <Link
                    href="/tasks"
                    className="text-sm font-medium text-primary hover:underline"
                  >
                    View all tasks
                  </Link>
                </div>
              </div>
            )}
          </CardContent>
        </Card>
      </div>
    </DashboardLayout>
  )
} 