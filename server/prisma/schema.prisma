// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String       @id @default(uuid())
  email              String       @unique
  password           String
  name               String
  avatar             String?
  isEmailVerified    Boolean      @default(false)
  verificationToken  String?
  resetPasswordToken String?
  stripeCustomerId   String?
  subscription       Subscription?
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
  projects           Project[]
  tasks              Task[]
  invitations        Invitation[]
}

model Subscription {
  id               String   @id @default(uuid())
  userId           String   @unique
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  planId           String
  status           String // active, cancelled, etc.
  currentPeriodEnd DateTime
  stripeSubscriptionId String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model Project {
  id          String       @id @default(uuid())
  name        String
  description String?
  ownerId     String
  owner       User         @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  tasks       Task[]
  collaborators Invitation[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Task {
  id              String        @id @default(uuid())
  title           String
  description     String?
  status          String        @default("TODO") // TODO, IN_PROGRESS, DONE
  priority        String        @default("MEDIUM") // LOW, MEDIUM, HIGH
  dueDate         DateTime?
  reminderSent    Boolean       @default(false)
  assigneeId      String?
  assignee        User?         @relation(fields: [assigneeId], references: [id], onDelete: SetNull)
  projectId       String?
  project         Project?      @relation(fields: [projectId], references: [id], onDelete: SetNull)
  parentTaskId    String?
  parentTask      Task?         @relation("TaskToSubtask", fields: [parentTaskId], references: [id], onDelete: Cascade)
  subtasks        Task[]        @relation("TaskToSubtask")
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model Invitation {
  id          String       @id @default(uuid())
  email       String
  token       String       @unique
  projectId   String
  project     Project      @relation(fields: [projectId], references: [id], onDelete: Cascade)
  invitedById String
  invitedBy   User         @relation(fields: [invitedById], references: [id], onDelete: Cascade)
  status      String       @default("PENDING") // PENDING, ACCEPTED, REJECTED
  expiresAt   DateTime
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}
